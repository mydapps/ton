#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#pragma version >=0.2.0;

const int INITIAL_SUPPLY = 1000000000000000000; ;; 1 billion tokens (with 9 decimal places)
const int MIN_INITIAL_LIQUIDITY = 100000000; ;; 0.1 TON
const int MAX_INITIAL_LIQUIDITY = 1000000000000; ;; 1000 TON
const int BUY_FEE = 20; ;; 2%
const int COMMUNITY_FEE = 10; ;; 1%
const int RECIPIENT_FEE = 10; ;; 1%

;; Storage
;; storage#_ admin_address:MsgAddress jetton_minter:MsgAddress tokens:(HashmapE 256 TokenData) = Storage;
;; token_data#_ total_supply:Coins liquidity:Coins community_admin:MsgAddress fee_recipient:MsgAddress jetton_wallet_address:MsgAddress = TokenData;

() log_transfer_notification(int amount, slice from_address, slice token_address, int initial_liquidity) impure inline {
    cell log_msg = begin_cell()
        .store_uint(0x7fffffbc, 32) ;; op for log transfer notification
        .store_coins(amount)
        .store_slice(from_address)
        .store_slice(token_address)
        .store_coins(initial_liquidity)
    .end_cell();
    send_raw_message(log_msg, 1);
}

(slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; admin_address
        ds~load_msg_addr(), ;; jetton_minter
        ds~load_dict() ;; tokens
    );
}

() save_data(slice admin_address, slice jetton_minter, cell tokens) impure inline {
    set_data(begin_cell()
        .store_slice(admin_address)
        .store_slice(jetton_minter)
        .store_dict(tokens)
        .end_cell()
    );
}

(int, int, slice, slice, slice) load_token_data(slice token_address) inline {
    (_, _, cell tokens) = load_data();
    int token_key = token_address.preload_uint(256); ;; Convert slice to int key
    (slice token_data, int found?) = tokens.udict_get?(256, token_key);
    throw_unless(79, found?);
    return (
        token_data~load_coins(), ;; total_supply
        token_data~load_coins(), ;; liquidity
        token_data~load_msg_addr(), ;; community_admin
        token_data~load_msg_addr(), ;; fee_recipient
        token_data~load_msg_addr() ;; jetton_wallet_address
    );
}

() save_token_data(slice token_address, int total_supply, int liquidity, slice community_admin, slice fee_recipient, slice jetton_wallet_address) impure inline {
    (slice admin_address, slice jetton_minter, cell tokens) = load_data();
    int token_key = token_address.preload_uint(256); ;; Convert slice to int key
    tokens~udict_set_builder(256, token_key, begin_cell()
        .store_coins(total_supply)
        .store_coins(liquidity)
        .store_slice(community_admin)
        .store_slice(fee_recipient)
        .store_slice(jetton_wallet_address)
    );
    save_data(admin_address, jetton_minter, tokens);

    cell log_save_msg = begin_cell()
        .store_uint(0x7fffffbb, 32) ;; op for log save message
        .store_slice(token_address)
        .store_coins(total_supply)
        .store_coins(liquidity)
    .end_cell();
    send_raw_message(log_save_msg, 1);
}

int calculate_price(int supply) inline {
    ;; Simple quadratic curve: price = (supply / 1000000000)^2
    return (supply * supply) / (1000000000000000000 * 1000000000000000000);
}

int calculate_tokens_to_buy(int ton_amount, int current_supply) inline {
    int tokens_to_buy = 0;
    int remaining_tons = ton_amount;
    int current_price = calculate_price(current_supply);
    
    while (remaining_tons >= current_price) {
        tokens_to_buy += 1000000000; ;; Increment by 1 token (considering 9 decimal places)
        remaining_tons -= current_price;
        current_price = calculate_price(current_supply - tokens_to_buy);
    }
    
    return tokens_to_buy;
}

int calculate_tons_to_receive(int tokens_to_sell, int current_supply) inline {
    int tons_to_receive = 0;
    int remaining_tokens = tokens_to_sell;
    int current_price = calculate_price(current_supply);
    
    while (remaining_tokens > 0) {
        tons_to_receive += current_price;
        remaining_tokens -= 1000000000; ;; Decrement by 1 token (considering 9 decimal places)
        current_price = calculate_price(current_supply + remaining_tokens);
    }
    
    return tons_to_receive;
}

() send_tons(slice address, int amount) impure inline {
    var msg = begin_cell()
        .store_uint(0x10, 6)
        .store_slice(address)
        .store_coins(amount)
        .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .end_cell();
    send_raw_message(msg, 1);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    (slice admin_address, slice jetton_minter, _) = load_data();
    
    if (op == op::transfer_notification()) {
    int amount = in_msg_body~load_coins();
    slice from_address = in_msg_body~load_msg_addr();
    throw_unless(73, equal_slices(sender_address, jetton_minter));

    slice token_address = in_msg_body~load_msg_addr();
    slice community_admin = in_msg_body~load_msg_addr();
    slice fee_recipient = in_msg_body~load_msg_addr();
    int initial_liquidity = in_msg_body~load_coins();

    throw_unless(75, initial_liquidity >= MIN_INITIAL_LIQUIDITY);
    throw_unless(76, initial_liquidity <= MAX_INITIAL_LIQUIDITY);

    save_token_data(token_address, amount, initial_liquidity, community_admin, fee_recipient, sender_address);
    return ();
}

    if (op == op::buy_tokens()) {
        slice token_address = in_msg_body~load_msg_addr();
        (int total_supply, int liquidity, slice community_admin, slice fee_recipient, slice jetton_wallet_address) = load_token_data(token_address);
        
        int amount = msg_value - 50000000; ;; Subtract 0.05 TON for gas
        int tokens_to_buy = calculate_tokens_to_buy(amount, total_supply);
        
        int fee = (amount * BUY_FEE) / 1000;
        int community_fee = (fee * COMMUNITY_FEE) / BUY_FEE;
        int recipient_fee = (fee * RECIPIENT_FEE) / BUY_FEE;
        
        send_tons(community_admin, community_fee);
        send_tons(fee_recipient, recipient_fee);
        
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(50000000) ;; 0.05 TON for gas
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(tokens_to_buy)
            .store_slice(sender_address)
            .store_slice(sender_address)
            .store_uint(0, 1)
            .store_coins(1)
            .store_uint(0, 1);
        send_raw_message(msg.end_cell(), 0);
        
        save_token_data(token_address, total_supply - tokens_to_buy, liquidity + amount - fee, community_admin, fee_recipient, jetton_wallet_address);
        return ();
    }
   
    if (op == op::sell_tokens()) {
        slice token_address = in_msg_body~load_msg_addr();
        int tokens_to_sell = in_msg_body~load_coins();
        (int total_supply, int liquidity, slice community_admin, slice fee_recipient, slice jetton_wallet_address) = load_token_data(token_address);
        
        int tons_to_receive = calculate_tons_to_receive(tokens_to_sell, total_supply);
        throw_unless(77, tons_to_receive <= liquidity);
        
        ;; Transfer tokens from seller to contract
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(jetton_wallet_address)
            .store_coins(50000000) ;; 0.05 TON for gas
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::transfer(), 32)
            .store_uint(query_id, 64)
            .store_coins(tokens_to_sell)
            .store_slice(sender_address)
            .store_slice(my_address())
            .store_uint(0, 1)
            .store_coins(1)
            .store_uint(0, 1);
        send_raw_message(msg.end_cell(), 0);
        
        ;; Send TONs to seller
        send_tons(sender_address, tons_to_receive);
        
        save_token_data(token_address, total_supply + tokens_to_sell, liquidity - tons_to_receive, community_admin, fee_recipient, jetton_wallet_address);
        return ();
    }

    throw(0xffff);
}

(int, int, slice, slice, slice) get_token_data(slice token_address) method_id {
    return load_token_data(token_address);
}

slice get_admin_address() method_id {
    (slice admin_address, _, _) = load_data();
    return admin_address;
}

slice get_jetton_minter() method_id {
    (_, slice jetton_minter, _) = load_data();
    return jetton_minter;
}

(int, int) get_curve_data() method_id {
    (_, _, cell tokens) = load_data();
    (slice token_data, int found?) = tokens.udict_get?(256, 0); ;; Assuming the first token is at key 0
    if (found?) {
        int total_supply = token_data~load_coins();
        int liquidity = token_data~load_coins();
        return (total_supply, liquidity);
    } else {
        return (0, 0);
    }
}

cell get_raw_tokens_data() method_id {
    (_, _, cell tokens) = load_data();
    return tokens;
}
cell get_contract_data() method_id {
    return get_data();
}