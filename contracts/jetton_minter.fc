#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/constants.fc";
#include "imports/jetton-utils.fc";
#include "imports/op-codes.fc";
#include "imports/utils.fc";
#include "imports/discovery-params.fc";
#pragma version >=0.2.0;

() log_create_token(slice community_admin, slice fee_recipient, int initial_liquidity, int initial_supply) impure inline {
    cell log_msg = begin_cell()
        .store_uint(0x7fffffbf, 32) ;; op for log message
        .store_slice(community_admin)
        .store_slice(fee_recipient)
        .store_coins(initial_liquidity)
        .store_coins(initial_supply)
    .end_cell();
    send_raw_message(log_msg, 1); ;; mode 1 to pay fees separately
}

(int, slice, cell, cell, slice) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
            ds~load_coins(), ;; total_supply
            ds~load_msg_addr(), ;; admin_address
            ds~load_ref(), ;; content
            ds~load_ref(), ;; jetton_wallet_code
            ds~load_msg_addr() ;; bonded_curve_address
    );
}

() save_data(int total_supply, slice admin_address, cell content, cell jetton_wallet_code, slice bonded_curve_address) impure inline {
    set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(admin_address)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
            .store_slice(bonded_curve_address)
            .end_cell()
    );
}

() mint_tokens(slice to_address, cell jetton_wallet_code, int jetton_amount, cell master_msg) impure {
    cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
    slice to_wallet_address = calculate_jetton_wallet_address(state_init);
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(to_wallet_address)
        .store_coins(50000000) ;; 0.05 TON for gas
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(master_msg);
    send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of provide_wallet_address cost

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, slice bonded_curve_address) = load_data();

    if (op == op::mint()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice to_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();
        cell master_msg = in_msg_body~load_ref();
        slice master_msg_cs = master_msg.begin_parse();
        master_msg_cs~skip_bits(32 + 64); ;; op + query_id
        int jetton_amount = master_msg_cs~load_coins();
        mint_tokens(to_address, jetton_wallet_code, amount, master_msg);
        save_data(total_supply + jetton_amount, admin_address, content, jetton_wallet_code, bonded_curve_address);
        return ();
    }

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        throw_unless(74,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        save_data(total_supply - jetton_amount, admin_address, content, jetton_wallet_code, bonded_curve_address);
        slice response_address = in_msg_body~load_msg_addr();
        if (response_address.preload_uint(2) != 0) {
            var msg = begin_cell()
                .store_uint(0x10, 6) ;; nobounce - int_msg_info$0 ihr_disabled:Bool bounce:Bool bounced:Bool src:MsgAddress -> 011000
                .store_slice(response_address)
                .store_coins(0)
                .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_uint(op::excesses(), 32)
                .store_uint(query_id, 64);
            send_raw_message(msg.end_cell(), 2 + 64);
        }
        return ();
    }

    if (op == op::provide_wallet_address()) {
        throw_unless(75, msg_value > fwd_fee + 50000000); ;; check if at least 0.05 TON were provided
        slice owner_address = in_msg_body~load_msg_addr();
        int include_address? = in_msg_body~load_uint(1);

        cell state_init = calculate_jetton_wallet_state_init(owner_address, my_address(), jetton_wallet_code);
        slice jetton_wallet_address = calculate_jetton_wallet_address(state_init);
        var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(op::take_wallet_address(), 32)
            .store_uint(query_id, 64);

        if (include_address?) {
            msg = msg.store_uint(1, 1)
                     .store_ref(
                        begin_cell().store_slice(jetton_wallet_address).end_cell()
                     );
        } else {
            msg = msg.store_uint(0, 1);
        }
        send_raw_message(msg.end_cell(), 64);
        return ();
    }

    if (op == op::change_admin()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice new_admin_address = in_msg_body~load_msg_addr();
        save_data(total_supply, new_admin_address, content, jetton_wallet_code, bonded_curve_address);
        return ();
    }

    if (op == op::change_content()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        save_data(total_supply, admin_address, in_msg_body~load_ref(), jetton_wallet_code, bonded_curve_address);
        return ();
    }

    if (op == op::create_token()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice community_admin = in_msg_body~load_msg_addr();
        slice fee_recipient = in_msg_body~load_msg_addr();
        int initial_liquidity = in_msg_body~load_coins();
        
        int initial_supply = 1000000000000000000; ;; 1 billion tokens (with 9 decimal places)
        
        log_create_token(community_admin, fee_recipient, initial_liquidity, initial_supply);

        ;; Mint initial tokens to bonded curve contract
        mint_tokens(bonded_curve_address, jetton_wallet_code, initial_supply, 
            begin_cell().store_uint(op::transfer_notification(), 32)
                .store_uint(query_id, 64)
                .store_coins(initial_supply)
                .store_slice(my_address()) ;; from_address
                .store_slice(my_address()) ;; token_address (this contract's address)
                .store_slice(community_admin)
                .store_slice(fee_recipient)
                .store_coins(initial_liquidity)
            .end_cell());
        
        cell log_mint_msg = begin_cell()
            .store_uint(0x7fffffbe, 32) ;; op for log mint message
            .store_coins(initial_supply)
            .store_slice(bonded_curve_address)
        .end_cell();
        send_raw_message(log_mint_msg, 1);

        save_data(initial_supply, admin_address, content, jetton_wallet_code, bonded_curve_address);

        cell log_end_msg = begin_cell()
            .store_uint(0x7fffffbd, 32) ;; op for log end message
            .store_coins(initial_supply)
        .end_cell();
        send_raw_message(log_end_msg, 1);

        return ();
    }

    if (op == op::set_bonded_curve_address()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        throw_unless(75, equal_slices(bonded_curve_address, my_address())); ;; Ensure it's only set once
        slice new_bonded_curve_address = in_msg_body~load_msg_addr();
        save_data(total_supply, admin_address, content, jetton_wallet_code, new_bonded_curve_address);
        return ();
    }

    throw(0xffff);
}

(int, int, slice, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, slice bonded_curve_address) = load_data();
    return (total_supply, -1, admin_address, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice admin_address, cell content, cell jetton_wallet_code, slice bonded_curve_address) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}

slice get_bonded_curve_address() method_id {
    (_, _, _, _, slice bonded_curve_address) = load_data();
    return bonded_curve_address;
}